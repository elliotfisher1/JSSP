#!/usr/bin/env python3
"""
Comprehensive Job Scheduler ACO for single‑machine sequencing

Features:
 • Static change‑over penalties (raw material, tooling, ID)
 • Dynamic due‑date penalties over 5 working‑day buffer
 • Profitability heuristic toggle (high/low/off)
 • Detailed CSV export (sequence + start/finish/lateness)
 • Visual outputs: single‑row Gantt chart, convergence plot, pheromone heatmap
 • All weights/modes exposed at top for UI sliders

Expected CSV columns (case‑sensitive):
    id, quantity, material, raw material, ID,
    time_minutes (per piece), price_gbp (per job), DUE DATE
"""

import csv, logging, os
from pathlib import Path
from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional, Tuple

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# ──────────────────────────────────────────────────────────────────────────────
# Logging
# ──────────────────────────────────────────────────────────────────────────────
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s ▶ %(levelname)s ▶ %(message)s")

# ──────────────────────────────────────────────────────────────────────────────
# Tunables (for UI sliders)
# ──────────────────────────────────────────────────────────────────────────────
RAW_MATERIAL_PENALTY = 1000.0
MATERIAL_PENALTY     = 100.0
ID_PENALTY           = 50.0

DUE_DATE_ENABLED    = True
DUE_BUFFER_WORKDAYS = 5
DUE_PENALTY_SCALE   = 100.0
DUE_PENALTY_CAP     = 5000.0

PROFIT_MODE = 1   # 0=off,1=high-profit,2=low-profit
ATTR_EXP    = 1.0

ALPHA, BETA   = 1.5, 4.0
RHO, Q        = 0.2, 250.0
TAU_MIN, TAU_MAX = 1e-4, 10.0

NUM_ANTS, NUM_ITERATIONS = 50, 500
INITIAL_EPSILON, MIN_EPSILON = 0.3, 0.05
DECAY_RATE = 0.995

CSV_FILE        = os.path.expanduser('~/Desktop/vrp01001_extended.csv')
BEST_SCHED_CSV  = os.path.expanduser('~/Desktop/NEW/best_schedule.csv')
DETAILED_CSV    = os.path.expanduser('~/Desktop/NEW/detailed_schedule.csv')
GANTT_PNG       = os.path.expanduser('~/Desktop/NEW/schedule_gantt.png')
CONV_PNG        = os.path.expanduser('~/Desktop/NEW/convergence.png')
PHER_HM_PNG     = os.path.expanduser('~/Desktop/NEW/pheromone_heatmap.png')

rng = np.random.default_rng()

# ──────────────────────────────────────────────────────────────────────────────
# Read jobs
# ──────────────────────────────────────────────────────────────────────────────

def read_jobs(csv_file: str = CSV_FILE) -> List[Dict[str, Any]]:
    df = pd.read_csv(csv_file)
    expected = {"id","quantity","material","raw_material","ID",
                "time_minutes","price_gbp","DUE DATE"}
    if not expected.issubset(df.columns):
        missing = expected - set(df.columns)
        raise ValueError(f"CSV missing cols: {missing}")
    return df.to_dict('records')

# ──────────────────────────────────────────────────────────────────────────────
# Static change‑over penalty
# ──────────────────────────────────────────────────────────────────────────────

def compute_changeover_penalty(job_i, job_j) -> float:
    p = 0.0
    if job_i['raw_material'] != job_j['raw_material']:
        p += RAW_MATERIAL_PENALTY
    if job_i['material'] != job_j['material']:
        p += MATERIAL_PENALTY
    if job_i['ID'] != job_j['ID']:
        p += ID_PENALTY
    return p

# ──────────────────────────────────────────────────────────────────────────────
# Dynamic due‑date penalty over working days
# ──────────────────────────────────────────────────────────────────────────────

def days_until_due_workdays(job, elapsed_minutes, today: date = None, fmt: str = '%d/%m/%Y') -> float:
    if today is None:
        today = date.today()
    due = datetime.strptime(str(job['DUE DATE']), fmt).date()
    bus_days = np.busday_count(today.isoformat(), due.isoformat())
    return bus_days - (elapsed_minutes / 1440.0)


def due_date_penalty(job, elapsed_minutes) -> float:
    if not DUE_DATE_ENABLED:
        return 0.0
    d = days_until_due_workdays(job, elapsed_minutes)
    if d > DUE_BUFFER_WORKDAYS:
        return 0.0
    if d >= 0:
        return ((DUE_BUFFER_WORKDAYS - d) / DUE_BUFFER_WORKDAYS) * DUE_PENALTY_SCALE
    return min((abs(d) ** 2) * DUE_PENALTY_SCALE, DUE_PENALTY_CAP)

# ──────────────────────────────────────────────────────────────────────────────
# Profitability heuristic
# ──────────────────────────────────────────────────────────────────────────────

def job_attractiveness(job) -> float:
    price     = float(job['price_gbp'])
    total_time = float(job['time_minutes']) * float(job['quantity'])
    return price / max(total_time, 0.1)


def make_heuristic_matrix(jobs, cost_mtx) -> np.ndarray:
    base_eta = 1.0 / (cost_mtx + 1e-9)
    if PROFIT_MODE == 0:
        return base_eta
    attr = np.array([job_attractiveness(j) for j in jobs])
    if PROFIT_MODE == 1:
        scale = attr ** ATTR_EXP
    elif PROFIT_MODE == 2:
        scale = (1.0 / attr) ** ATTR_EXP
    else:
        raise ValueError("PROFIT_MODE must be 0,1,2")
    return scale[np.newaxis, :] * base_eta

# ──────────────────────────────────────────────────────────────────────────────
# Build static penalty matrix
# ──────────────────────────────────────────────────────────────────────────────

def build_penalty_matrix(jobs) -> np.ndarray:
    n = len(jobs)
    m = np.zeros((n, n), dtype=float)
    for i, ji in enumerate(jobs):
        for j, jj in enumerate(jobs):
            m[i, j] = np.inf if i == j else compute_changeover_penalty(ji, jj)
    return m

# ──────────────────────────────────────────────────────────────────────────────
# Ant class
# ──────────────────────────────────────────────────────────────────────────────

class Ant:
    def __init__(self, start: int, n_jobs: int) -> None:
        self.tour = [start]
        self.allowed = [i for i in range(n_jobs) if i != start]
        self.current = start
        self.total_cost = 0.0
        self.elapsed_minutes = 0.0

    def _probabilities(self, pheromone: np.ndarray, heuristic: np.ndarray) -> np.ndarray:
        tau = pheromone[self.current, self.allowed] ** ALPHA
        eta = heuristic[self.current, self.allowed] ** BETA
        w = tau * eta
        return w / w.sum() if w.sum() else np.full_like(w, 1/len(w))

    def choose(self, pheromone: np.ndarray, heuristic: np.ndarray, eps: float) -> int:
        if rng.random() < eps:
            return rng.choice(self.allowed)
        probs = self._probabilities(pheromone, heuristic)
        return rng.choice(self.allowed, p=probs)

    def move(self, nxt: int, cost_mtx: np.ndarray, jobs: List[Dict[str, Any]]) -> None:
        self.total_cost += cost_mtx[self.current, nxt]
        self.total_cost += due_date_penalty(jobs[nxt], self.elapsed_minutes)
        # advance clock by full job duration: time_minutes * quantity
        dur = float(jobs[nxt]['time_minutes']) * float(jobs[nxt]['quantity'])
        self.elapsed_minutes += dur
        self.tour.append(nxt)
        self.allowed.remove(nxt)
        self.current = nxt

# ──────────────────────────────────────────────────────────────────────────────
# ACO scheduler
# ──────────────────────────────────────────────────────────────────────────────

def ant_colony_scheduler(jobs) -> Tuple[List[int], List[float], np.ndarray]:
    n = len(jobs)
    cost_mtx = build_penalty_matrix(jobs)
    heuristic = make_heuristic_matrix(jobs, cost_mtx)
    pheromone = np.full((n, n), 1.0)

    best_tour: Optional[List[int]] = None
    best_cost = float('inf')
    costs: List[float] = []
    eps = INITIAL_EPSILON

    for it in range(1, NUM_ITERATIONS + 1):
        ants = [Ant(rng.integers(0, n), n) for _ in range(NUM_ANTS)]
        for ant in ants:
            while ant.allowed:
                nxt = ant.choose(pheromone, heuristic, eps)
                ant.move(nxt, cost_mtx, jobs)
            if ant.total_cost < best_cost:
                best_cost = ant.total_cost
                best_tour = ant.tour.copy()
        costs.append(best_cost)

        pheromone *= (1 - RHO)
        for ant in ants:
            deposit = Q / (ant.total_cost + 1e-9)
            for frm, to in zip(ant.tour[:-1], ant.tour[1:]):
                pheromone[frm, to] += deposit
        if best_tour:
            deposit = Q / (best_cost + 1e-9)
            for frm, to in zip(best_tour[:-1], best_tour[1:]):
                pheromone[frm, to] += deposit
        np.clip(pheromone, TAU_MIN, TAU_MAX, out=pheromone)

        logging.info("Iter %3d ▶ best cost = %.1f", it, best_cost)
        eps = max(eps * DECAY_RATE, MIN_EPSILON)

    return best_tour, costs, pheromone

# ──────────────────────────────────────────────────────────────────────────────
# Exports & Visualizations
# ──────────────────────────────────────────────────────────────────────────────

def export_schedule(tour: List[int], jobs: List[Dict[str, Any]]) -> None:
    with open(BEST_SCHED_CSV, 'w', newline='') as f:
        w = csv.writer(f)
        w.writerow(["sequence", *jobs[0].keys()])
        for seq, idx in enumerate(tour, 1):
            w.writerow([seq, *jobs[idx].values()])
    logging.info("Exported best schedule → %s", BEST_SCHED_CSV)


def export_detailed(tour: List[int], jobs: List[Dict[str, Any]]) -> None:
    now = date.today()
    current = datetime.combine(now, datetime.min.time())
    elapsed = 0.0
    rows = []
    for seq, idx in enumerate(tour, 1):
        job = jobs[idx]
        start = current
        dur_minutes = float(job['time_minutes']) * float(job['quantity'])
        finish = start + timedelta(minutes=dur_minutes)
        elapsed += dur_minutes
        due_date = datetime.strptime(job['DUE DATE'], '%d/%m/%Y').date()
        lateness = (finish.date() - due_date).days
        rows.append({
            'sequence': seq,
            'id': job['id'],
            'start': start.strftime('%Y-%m-%d %H:%M'),
            'finish': finish.strftime('%Y-%m-%d %H:%M'),
            'elapsed_minutes': round(elapsed, 1),
            'due_date': due_date,
            'lateness_days': lateness
        })
        current = finish
    pd.DataFrame(rows).to_csv(DETAILED_CSV, index=False)
    logging.info("Exported detailed schedule → %s", DETAILED_CSV)


def plot_gantt(tour: List[int], jobs: List[Dict[str, Any]]) -> None:
    now = date.today()
    current = datetime.combine(now, datetime.min.time())
    starts, durations, labels = [], [], []
    for idx in tour:
        job = jobs[idx]
        starts.append(current)
        dur = float(job['time_minutes']) * float(job['quantity'])
        durations.append(dur / 60 / 24)  # days for matplotlib
        labels.append(str(job['id']))
        current += timedelta(minutes=dur)

    fig, ax = plt.subplots(figsize=(12, 2))
    ax.barh(0, durations, left=mdates.date2num(starts), height=0.5, align='center')
    for start, dur, lbl in zip(starts, durations, labels):
        mid = start + timedelta(days=dur)
        ax.text(mdates.date2num(mid), 0, lbl, ha='center', va='center', color='white', fontsize=9)
    ax.set_yticks([])
    ax.xaxis_date()
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M\n%b %d'))
    plt.tight_layout()
    plt.savefig(GANTT_PNG)
    plt.close()
    logging.info("Saved Gantt chart → %s", GANTT_PNG)


def plot_convergence(costs: List[float]) -> None:
    plt.figure(figsize=(8, 4))
    plt.plot(costs, marker='o')
    plt.xlabel('Iteration')
    plt.ylabel('Best Cost')
    plt.title('ACO Convergence')
    plt.grid(True)
    plt.savefig(CONV_PNG)
    plt.close()
    logging.info("Saved convergence plot → %s", CONV_PNG)


def plot_pheromone(pheromone: np.ndarray) -> None:
    plt.figure(figsize=(6, 5))
    plt.imshow(pheromone, cmap='hot', interpolation='nearest')
    plt.colorbar(label='Pheromone Level')
    plt.title('Final Pheromone Matrix')
    plt.xlabel('Job Index')
    plt.ylabel('Job Index')
    plt.tight_layout()
    plt.savefig(PHER_HM_PNG)
    plt.close()
    logging.info("Saved pheromone heatmap → %s", PHER_HM_PNG)

# ──────────────────────────────────────────────────────────────────────────────
# Main
# ──────────────────────────────────────────────────────────────────────────────

def main() -> None:
    jobs = read_jobs()
    logging.info("Loaded %d jobs from %s", len(jobs), CSV_FILE)
    best_tour, costs, pheromone = ant_colony_scheduler(jobs)
    export_schedule(best_tour, jobs)
    export_detailed(best_tour, jobs)
    plot_gantt(best_tour, jobs)
    plot_convergence(costs)
    plot_pheromone(pheromone)

if __name__ == '__main__':
    main()
